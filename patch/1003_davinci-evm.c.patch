--- ./sound/soc/davinci/davinci-evm.c.orig	2014-11-12 01:59:34.000000000 +0300
+++ ./sound/soc/davinci/davinci-evm.c	2015-04-02 10:29:42.281765327 +0300
@@ -36,6 +36,15 @@
 	unsigned sysclk;
 };
 
+static unsigned int evm_get_bclk(struct snd_pcm_hw_params *params)
+{
+	int sample_size = snd_pcm_format_width(params_format(params));
+	int rate = params_rate(params);
+	int channels = params_channels(params);
+
+	return sample_size * channels * rate;
+}
+
 static int evm_startup(struct snd_pcm_substream *substream)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
@@ -115,6 +124,39 @@
 	return 0;
 }
 
+static int tas5715_hw_params(struct snd_pcm_substream *substream,
+				struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	struct snd_soc_codec *codec = rtd->codec;
+	struct snd_soc_card *soc_card = codec->card;
+	struct platform_device *pdev = to_platform_device(soc_card->dev);
+	unsigned int bclk_freq = evm_get_bclk(params);
+	unsigned sysclk = ((struct snd_soc_card_drvdata_davinci *)
+				snd_soc_card_get_drvdata(soc_card))->sysclk;
+	int ret;
+
+	ret = snd_soc_dai_set_clkdiv(cpu_dai, 1, sysclk/bclk_freq);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "can't set CPU DAI clock divider %d\n",
+			ret);
+		return ret;
+	}
+
+	/* set the CPU system clock */
+	ret = snd_soc_dai_set_sysclk(cpu_dai, 0, sysclk, SND_SOC_CLOCK_OUT);
+	if (ret < 0)
+		return ret;
+
+	ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_I2S |
+				SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_NB_NF);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+}
+
 /* If changing sample format the tda998x configuration (REG_CTS_N) needs
    to be changed. */
 #define TDA998X_SAMPLE_FORMAT SNDRV_PCM_FORMAT_S32_LE
@@ -148,6 +190,9 @@
 	.hw_params = evm_hw_params,
 };
 
+static struct snd_soc_ops tas5715_ops = {
+	.hw_params = tas5715_hw_params,
+};
 
 static struct snd_soc_ops evm_tda998x_ops = {
 	.startup = evm_tda998x_startup,
@@ -250,6 +295,11 @@
 	return 0;
 }
 
+static int evm_tas5715_init(struct snd_soc_pcm_runtime *rtd)
+{
+	return 0;
+}
+
 /* davinci-evm digital audio interface glue - connects codec <--> CPU */
 static struct snd_soc_dai_link dm6446_evm_dai = {
 	.name = "TLV320AIC3X",
@@ -468,6 +518,16 @@
 		   SND_SOC_DAIFMT_IB_NF,
 };
 
+static struct snd_soc_dai_link evm_dai_tas5715 = {
+	.name		= "TAS5715",
+	.stream_name	= "Playback",
+	.codec_dai_name	= "tas5715-hifi",
+	.ops		= &tas5715_ops,
+	.init		= evm_tas5715_init,
+	.dai_fmt	= SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_CBS_CFS |
+			SND_SOC_DAIFMT_NB_NF,
+};
+
 static const struct of_device_id davinci_evm_dt_ids[] = {
 	{
 		.compatible = "ti,da830-evm-audio",
@@ -481,6 +541,10 @@
 		.compatible = "ti,dra7xx-evm-audio",
 		.data = (void *) &dra7xx_evm_link,
 	},
+	{
+		.compatible = "ti,tas5715-audio",
+		.data = (void *) &evm_dai_tas5715,
+	},
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, davinci_evm_dt_ids);
